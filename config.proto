syntax = "proto3";

package org.hypertrace.agent.config;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/hypertrace/agent-config/config";
option java_package = "org.hypertrace.agent.config";

// AgentConfig covers the config for agents.
// The config uses wrappers for primitive types to allow nullable values.
// The nullable values are used for instance to explicitly disable data capture or secure connection.
// Since the wrappers change structure of the objects the marshalling and unmarshalling
// have to be done via protobuf marshallers.
message AgentConfig {
    // serviceName identifies the service/process running e.g. "my service"
    google.protobuf.StringValue serviceName = 1;

    // reporting holds the reporting settings for the agent
    Reporting reporting = 2;

    // dataCapture describes the data being captured by instrumentation
    DataCapture dataCapture = 3;

    // propagationFormats list the supported propagation formats
    repeated PropagationFormat propagationFormats = 4;
}

// Reporting covers the options related to the mechanics for sending data to the
// tracing server o collector.
message Reporting {
    // address represents the host for reporting the traces e.g. api.traceable.ai
    google.protobuf.StringValue address = 1;

    // when `true`, connects to endpoints over TLS.
    google.protobuf.BoolValue secure = 2;

    // user specific token to access Traceable API
    google.protobuf.StringValue token = 3;

    // opa describes the setting related to the Open Policy Agent
    Opa opa = 4;
}

// Opa covers the options related to the mechanics for getting Open Policy Agent configuration file.
// The client should use secure and token option from reporting settings.
message Opa {
    // address represents the host for polling OPA config file e.g. http://opa.traceableai:8181/
    google.protobuf.StringValue address = 1;

    // poll period in seconds to query OPA service
    google.protobuf.Int32Value pollPeriodSeconds  = 2;
}

// Message describes what message should be considered for certain DataCapture option
message Message {
    // when `false` it disables the capture for the request in a client/request operation
    google.protobuf.BoolValue request = 1;

    // when `false` it disables the capture for the response in a client/request operation
    google.protobuf.BoolValue response = 2;
}

// DataCapture describes the elements to be captured by the agent instrumentation
message DataCapture {
    // httpHeaders enables/disables the capture of the request/response headers in HTTP
    Message httpHeaders = 1;

    // httpBody enables/disables the capture of the request/response body in HTTP
    Message httpBody = 2;

    // rpcMetadata enables/disables the capture of the request/response metadata in RPC
    Message rpcMetadata = 3;

    // rpcBody enables/disables the capture of the request/response body in RPC
    Message rpcBody = 4;
}

// PropagationFormat represents the propagation formats supported by agents
enum PropagationFormat {
    // B3 propagation format, agents should support both multi and single value formats
    // see https://github.com/openzipkin/b3-propagation
    B3 = 0;

    // W3C Propagation format
    // see https://www.w3.org/TR/trace-context/
    TRACECONTEXT = 1;
}
